// Generated by CoffeeScript 1.8.0
var BING_SEARCH_ENDPOINT, Search, async, debug, markets, request, url, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('underscore');

async = require('async');

debug = require('debug')('bing-search');

request = require('request');

url = require('url');

markets = require('./markets');

BING_SEARCH_ENDPOINT = 'https://api.datamarket.azure.com/Bing/Search';

Search = (function() {
  Search.SOURCES = ['web', 'image', 'video', 'news', 'spell', 'relatedsearch'];

  Search.PAGE_SIZE = 50;

  function Search(accountKey, parallel, useGzip) {
    this.accountKey = accountKey;
    this.parallel = parallel != null ? parallel : 10;
    this.useGzip = useGzip != null ? useGzip : true;
  }

  Search.prototype.requestOptions = function(options) {
    var reqOptions, s, sources, _ref;
    reqOptions = {
      Query: this.quoted(options.query),
      $top: options.top || 10,
      $skip: options.skip || 0
    };
    sources = (function() {
      var _i, _len, _ref, _results;
      _ref = options.sources || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        if (__indexOf.call(Search.SOURCES, s) >= 0) {
          _results.push(s);
        }
      }
      return _results;
    })();
    if (sources.length) {
      reqOptions.Sources = this.quoted(sources);
    }
    if (_ref = options.market, __indexOf.call(markets, _ref) >= 0) {
      reqOptions.Market = this.quoted(options.market);
    }
    return reqOptions;
  };

  Search.prototype.quoted = function(values) {
    var v;
    if (!_.isArray(values)) {
      values = [values];
    }
    values = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        v = values[_i];
        _results.push(v.replace("'", "''"));
      }
      return _results;
    })();
    return "'" + (values.join('+')) + "'";
  };

  Search.prototype.generateTops = function(numResults, pageSize) {
    var i, tops;
    if (pageSize == null) {
      pageSize = Search.PAGE_SIZE;
    }
    if (numResults % pageSize !== 0) {
      tops = [numResults % pageSize];
    }
    tops || (tops = []);
    return ((function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = Math.floor(numResults / pageSize); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(pageSize);
      }
      return _results;
    })()).concat(tops);
  };

  Search.prototype.generateSkips = function(numResults, skipStart) {
    var count, skips, _i, _len, _ref;
    skips = [skipStart];
    _ref = this.generateTops(numResults).slice(0, -1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      count = _ref[_i];
      skips.push(skips[skips.length - 1] + count);
    }
    return skips;
  };

  Search.prototype.parallelSearch = function(vertical, options, callback) {
    var opts, pairs, requestOptions, search;
    opts = _.extend({}, {
      top: Search.PAGE_SIZE,
      skip: 0
    }, options);
    pairs = _.zip(this.generateTops(opts.top), this.generateSkips(opts.top, opts.skip));
    requestOptions = _.map(pairs, function(_arg) {
      var skip, top;
      top = _arg[0], skip = _arg[1];
      return _.defaults({
        top: top,
        skip: skip
      }, options);
    });
    search = (function(_this) {
      return function(options, callback) {
        return _this.search(vertical, options, callback);
      };
    })(this);
    return async.mapLimit(requestOptions, this.parallel, search, callback);
  };

  Search.prototype.search = function(vertical, options, callback) {
    var req, requestOptions;
    requestOptions = {
      uri: "" + BING_SEARCH_ENDPOINT + "/" + vertical,
      qs: _.extend(this.requestOptions(options), {
        $format: 'json'
      }),
      auth: {
        user: this.accountKey,
        pass: this.accountKey
      },
      json: true,
      gzip: this.useGzip
    };
    req = request(requestOptions, function(err, res, body) {
      if (!(err || res.statusCode === 200)) {
        err || (err = new Error("Bad Bing API response " + res.statusCode));
      }
      if (err) {
        return callback(err);
      }
      return callback(null, body);
    });
    return debug(url.format(req.uri));
  };

  Search.prototype.counts = function(query, callback) {
    var getCounts;
    getCounts = (function(_this) {
      return function(options, callback) {
        options = _.extend({}, options, {
          query: query,
          sources: Search.SOURCES
        });
        return _this.search('Composite', options, function(err, result) {
          if (err) {
            return callback(err);
          }
          return callback(null, _this.extractCounts(result));
        });
      };
    })(this);
    return async.map([
      {
        skip: 1000
      }, {}
    ], getCounts, function(err, results) {
      if (err) {
        return callback(err);
      }
      return callback(null, _.extend(results[1], _.pick(results[0], 'web')));
    });
  };

  Search.prototype.extractCounts = function(result) {
    var keyRe, _ref;
    keyRe = /(\w+)Total$/;
    return _.chain((result != null ? (_ref = result.d) != null ? _ref.results : void 0 : void 0) || []).first().pairs().filter(function(_arg) {
      var key, value;
      key = _arg[0], value = _arg[1];
      return keyRe.test(key);
    }).map(function(_arg) {
      var key, value;
      key = _arg[0], value = _arg[1];
      key = keyRe.exec(key)[1].toLowerCase();
      value = Number(value);
      switch (key) {
        case 'spellingsuggestions':
          return ['spelling', value];
        default:
          return [key, value];
      }
    }).object().value();
  };

  Search.prototype.verticalSearch = function(vertical, verticalResultParser, query, options, callback) {
    var _ref;
    if (_.compact(arguments).length === 4) {
      _ref = [options, {}], callback = _ref[0], options = _ref[1];
    }
    return this.parallelSearch(vertical, _.extend({}, options, {
      query: query
    }), function(err, result) {
      if (err) {
        return callback(err);
      }
      return callback(null, verticalResultParser(result));
    });
  };

  Search.prototype.mapResults = function(results, fn) {
    return _.chain(results).pluck('d').pluck('results').flatten().map(fn).value();
  };

  Search.prototype.web = function(query, options, callback) {
    return this.verticalSearch('Web', _.bind(this.extractWebResults, this), query, options, callback);
  };

  Search.prototype.extractWebResults = function(results) {
    return this.mapResults(results, function(_arg) {
      var Description, DisplayUrl, ID, Title, Url;
      ID = _arg.ID, Title = _arg.Title, Description = _arg.Description, DisplayUrl = _arg.DisplayUrl, Url = _arg.Url;
      return {
        id: ID,
        title: Title,
        description: Description,
        displayUrl: DisplayUrl,
        url: Url
      };
    });
  };

  Search.prototype.images = function(query, options, callback) {
    return this.verticalSearch('Image', _.bind(this.extractImageResults, this), query, options, callback);
  };

  Search.prototype.extractImageResults = function(results) {
    return this.mapResults(results, (function(_this) {
      return function(entry) {
        return {
          id: entry.ID,
          title: entry.Title,
          url: entry.MediaUrl,
          sourceUrl: entry.SourceUrl,
          displayUrl: entry.DisplayUrl,
          width: Number(entry.Width),
          height: Number(entry.Height),
          size: Number(entry.FileSize),
          type: entry.ContentType,
          thumbnail: _this.extractThumbnail(entry)
        };
      };
    })(this));
  };

  Search.prototype.extractThumbnail = function(_arg) {
    var Thumbnail;
    Thumbnail = _arg.Thumbnail;
    return {
      url: Thumbnail.MediaUrl,
      type: Thumbnail.ContentType,
      width: Number(Thumbnail.Width),
      height: Number(Thumbnail.Height),
      size: Number(Thumbnail.FileSize)
    };
  };

  Search.prototype.videos = function(query, options, callback) {
    return this.verticalSearch('Video', _.bind(this.extractVideoResults, this), query, options, callback);
  };

  Search.prototype.extractVideoResults = function(results) {
    return this.mapResults(results, (function(_this) {
      return function(entry) {
        return {
          id: entry.ID,
          title: entry.Title,
          url: entry.MediaUrl,
          displayUrl: entry.DisplayUrl,
          runtime: Number(entry.RunTime),
          thumbnail: _this.extractThumbnail(entry)
        };
      };
    })(this));
  };

  Search.prototype.news = function(query, options, callback) {
    return this.verticalSearch('News', _.bind(this.extractNewsResults, this), query, options, callback);
  };

  Search.prototype.extractNewsResults = function(results) {
    return this.mapResults(results, function(entry) {
      return {
        id: entry.ID,
        title: entry.Title,
        source: entry.Source,
        url: entry.Url,
        description: entry.Description,
        date: new Date(entry.Date)
      };
    });
  };

  Search.prototype.spelling = function(query, options, callback) {
    return this.verticalSearch('SpellingSuggestions', _.bind(this.extractSpellResults, this), query, options, callback);
  };

  Search.prototype.extractSpellResults = function(results) {
    return this.mapResults(results, function(_arg) {
      var Value;
      Value = _arg.Value;
      return Value;
    });
  };

  Search.prototype.related = function(query, options, callback) {
    return this.verticalSearch('RelatedSearch', _.bind(this.extractRelatedResults, this), query, options, callback);
  };

  Search.prototype.extractRelatedResults = function(results) {
    return this.mapResults(results, function(_arg) {
      var BingUrl, Title;
      Title = _arg.Title, BingUrl = _arg.BingUrl;
      return {
        query: Title,
        url: BingUrl
      };
    });
  };

  Search.prototype.composite = function(query, options, callback) {
    var _ref;
    if (arguments.length === 2) {
      _ref = [options, {}], callback = _ref[0], options = _ref[1];
    }
    options = _.defaults({}, options, {
      query: query,
      sources: Search.SOURCES
    });
    return this.parallelSearch('Composite', options, (function(_this) {
      return function(err, results) {
        var convertToSingleSource;
        if (err) {
          return callback(err);
        }
        convertToSingleSource = function(results, source) {
          var r, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            r = results[_i];
            _results.push({
              d: {
                results: r.d.results[0][source]
              }
            });
          }
          return _results;
        };
        return callback(null, {
          web: _this.extractWebResults(convertToSingleSource(results, 'Web')),
          images: _this.extractImageResults(convertToSingleSource(results, 'Image')),
          videos: _this.extractVideoResults(convertToSingleSource(results, 'Video')),
          news: _this.extractNewsResults(convertToSingleSource(results, 'News')),
          spelling: _this.extractSpellResults(convertToSingleSource(results, 'SpellingSuggestions')),
          related: _this.extractRelatedResults(convertToSingleSource(results, 'RelatedSearch'))
        });
      };
    })(this));
  };

  return Search;

})();

module.exports = Search;
